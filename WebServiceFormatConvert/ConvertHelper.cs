using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using System.Text.RegularExpressions;
using System.Data;

namespace WebServiceFormatConvert
{
    public static class ConvertHelper
    {
        static ConvertHelper()
        {
            if (!(addressTypeDict.Count > 0))
            {
                addressTypeDict.Add("DeliveryAgent", "AgentNotifyParty");
                addressTypeDict.Add("ConsignorDocumentaryAddress", "Shipper");
                addressTypeDict.Add("ConsigneeDocumentaryAddress", "Consignee");
                addressTypeDict.Add("NotifyParty", "Notify");
            }
            if (!(locationTypeDict.Count > 0))
            {
                locationTypeDict.Add("PLACEOFRECEIPT", "PlaceOfReceipt");
                locationTypeDict.Add("PORTOFLOADING", "PortOfLoading");
                locationTypeDict.Add("PORTOFDISCHARGE", "PortOfDischarge");
                locationTypeDict.Add("FINALDESTINATION", "PortOfDestination");
                locationTypeDict.Add("PLACEOFDELIVERY", "PlaceOfDelivery");
            }
        }
        public static Dictionary<string, string> addressTypeDict = new Dictionary<string, string>();
        public static Dictionary<string, string> AddressTypeDict
        {
            get
            {
                return addressTypeDict;
            }

        }
        public static Dictionary<string, string> locationTypeDict = new Dictionary<string, string>();
        public static Dictionary<string, string> LocationTypeDict
        {
            get
            {
                return locationTypeDict;
            }

        }
        public static XDocument CargowiseToOCEBOS(string fPath)
        {
            XDocument cargowiseDoc = XDocument.Load(fPath);
            var docStr = cargowiseDoc.ToString();
            var shipmentStr = Regex.Match(docStr, @"<Shipment[\S\s]*?</Shipment>").Value;
            var shipment = XElement.Parse(shipmentStr);
            var OCEBOSDoc = new XDocument(
                new XComment("Sample XML file generated by XMLSpy v2008 sp1 (http://www.altova.com)")
                );
            OCEBOSDoc.Declaration = new XDeclaration("1.0", "UTF-8", "");
            var root = new XElement("Shipment");
            if (shipment.Element("SubShipmentCollection").Element("SubShipment") != null)
            {
                root = AnalyseSubshipment(shipment);
                if (root.HasElements)
                {
                    OCEBOSDoc.Add(root);
                    return OCEBOSDoc;
                }
            }

            OCEBOSDoc.Add(root);
            var datacontext = shipment.Element("DataContext");
            string mshipmentType = shipment.Element("ContainerMode").Element("Code").Value;
            string movementType = shipment.Element("TransportMode").Element("Code").Value;
            string mVessel = shipment.Element("VesselName").Value;
            string mVoyage = shipment.Element("VoyageFlightNo").Value;

            string mMSWB_NUM = shipment.Element("BookingConfirmationReference").Value;
            string mSWB_NUM = datacontext.Element("DataSourceCollection").Elements("DataSource").Where(x => x.Element("Type").Value == "ForwardingShipment").FirstOrDefault().Element("Key").Value;

            var siteid = datacontext.Element("EnterpriseID").Value + datacontext.Element("Company").Element("Code").Value;
            var sqlHelper = new SQLHelper(Resource1.ATP_SEA);
            var dt = sqlHelper.ExecuteQuery2DataTable("select * From dbo.Ocebos_Number", System.Data.CommandType.Text);
            var Ocebos_Number = "";
            if (dt != null && dt.Rows.Count > 0)
            {
                Ocebos_Number = dt.Rows[0][0].ToString();
                Ocebos_Number = addstr(Ocebos_Number);
                sqlHelper.ExecuteNoQuery("update Ocebos_Number set maxid=maxid+1", System.Data.CommandType.Text);
            }

            var dateColection = shipment.Element("DateCollection");

            XElement TransactionId = new XElement("TransactionId");
            TransactionId.Value = "SEA" + DateTime.Now.ToString("yyyyMMddhhmm");
            root.Add(TransactionId);

            XElement TransactionDateTime = new XElement("TransactionDateTime");
            TransactionDateTime.Value = DateTime.Now.Date.ToString("yyyy-MM-dd hh:mm:ss");
            root.Add(TransactionDateTime);

            XElement TransactionSetPurpose = new XElement("TransactionSetPurpose");
            TransactionSetPurpose.Value = "Add";
            root.Add(TransactionSetPurpose);

            XElement ShipmentType = new XElement("ShipmentType");
            ShipmentType.Value = mshipmentType;
            root.Add(ShipmentType);


            XElement DocumentDate = new XElement("DocumentDate");
            var documentdate = dateColection.Elements().Where(x => x.Name.LocalName == "BillIssued").FirstOrDefault().Value;
            documentdate = documentdate.Length > 10 ? documentdate.Substring(0, 10) : documentdate;
            root.Add(DocumentDate);

            XElement FileNumber = new XElement("FileNumber");
            FileNumber.Value = "File" + Ocebos_Number;
            root.Add(FileNumber);

            XElement MasterBillNumber = new XElement("MasterBillNumber");
            MasterBillNumber.Value = mMSWB_NUM;
            root.Add(MasterBillNumber);

            XElement HouseBillNumber = new XElement("HouseBillNumber");
            HouseBillNumber.Value = mSWB_NUM;
            root.Add(HouseBillNumber);

            XElement SubHouseBillNumber = new XElement("SubHouseBillNumber");
            SubHouseBillNumber.Value = "";
            root.Add(SubHouseBillNumber);

            XElement ITNumber = new XElement("ITNumber");
            ITNumber.Value = "aaaaaaaa";
            root.Add(ITNumber);

            XElement BookingNumber = new XElement("BookingNumber");
            BookingNumber.Value = "";// SWB.Rows[0]["jobid"].ToString();
            root.Add(BookingNumber);

            XElement OriginReference = new XElement("OriginReference");
            OriginReference.Value = "aaaaaaaa";
            root.Add(OriginReference);

            XElement Division = new XElement("Division");
            Division.Value = siteid;
            root.Add(Division);

            XElement PaymentMethod = new XElement("PaymentMethod");
            PaymentMethod.Value = "";//mswbTbl.Rows[0]["Pay_term"].ToString();
            root.Add(PaymentMethod);

            XElement TransportationMethod = new XElement("TransportationMethod");
            TransportationMethod.Value = "OCEAN";
            root.Add(TransportationMethod);

            XElement TypeOfMove = new XElement("TypeOfMove");
            TypeOfMove.Value = movementType;
            root.Add(TypeOfMove);

            XElement VesselName = new XElement("VesselName");
            VesselName.Value = mVessel;
            root.Add(VesselName);

            XElement VoyageFlightNumber = new XElement("VoyageFlightNumber");
            VoyageFlightNumber.Value = mVoyage;
            root.Add(VoyageFlightNumber);

            XElement DepartureDateTime = new XElement("DepartureDateTime");
            DepartureDateTime.Value = dateColection.Elements().Where(x => x.Element("Type").Value == "ShippedOnBoard").FirstOrDefault().Value;
            root.Add(DepartureDateTime);

            XElement ArrivalDateTime = new XElement("ArrivalDateTime");
            ArrivalDateTime.Value = dateColection.Elements().Where(x => x.Element("Type").Value == "FirstForeignArrival").FirstOrDefault().Value;
            root.Add(ArrivalDateTime);

            XElement ImportDate = new XElement("ImportDate");
            ImportDate.Value = ArrivalDateTime.Value.Length > 0 ? ArrivalDateTime.Value.Substring(0, 10) : "";
            root.Add(ImportDate);

            XElement FIRMSCode = new XElement("FIRMSCode");
            FIRMSCode.Value = "aaaaaaaa";
            root.Add(FIRMSCode);

            XElement Parties = new XElement("Parties");
            root.Add(Parties);

            var OrganCollect = shipment.Elements("OrganizationAddressCollection").Elements();
            foreach (var OrganizationAddress in OrganCollect)
            {
                var Party = new XElement("Party");
                Parties.Add(Party);
                var OrganizationCode = OrganizationAddress.Element("AddressType").Value;
                XElement PartyType = new XElement("PartyType");
                PartyType.Value = OrganizationCode;
                Party.Add(PartyType);

                XElement PartyCode = new XElement("PartyCode");
                PartyCode.Value = OrganizationCode;
                Party.Add(PartyCode);

                XElement PartyName = new XElement("Name");
                PartyName.Value = OrganizationAddress.Element("CompanyName").Value;
                Party.Add(PartyName);

                XElement PartyAddress1 = new XElement("Address1");
                PartyAddress1.Value = OrganizationAddress.Element("Address1").Value;
                Party.Add(PartyAddress1);

                XElement PartyAddress2 = new XElement("Address2");
                PartyAddress2.Value = OrganizationAddress.Element("Address2").Value;
                Party.Add(PartyAddress2);

                string str_cityname = OrganizationAddress.Element("City").Value,
                    str_StateOrProvinceCode = OrganizationAddress.Element("State").Value,
                    str_CountryCode = OrganizationAddress.Element("Country").Element("Code").Value;

                XElement CityName = new XElement("CityName");
                CityName.Value = str_cityname;
                Party.Add(CityName);

                XElement StateOrProvinceCode = new XElement("StateOrProvinceCode");
                StateOrProvinceCode.Value = str_StateOrProvinceCode;
                Party.Add(StateOrProvinceCode);

                XElement PostalCode = new XElement("PostalCode");
                PostalCode.Value = OrganizationAddress.Element("Postcode").Value;
                Party.Add(PostalCode);

                XElement CountryCode = new XElement("CountryCode");
                CountryCode.Value = str_CountryCode;
                Party.Add(CountryCode);

                XElement IdCode = new XElement("IdCode");
                IdCode.Value = OrganizationCode;
                Party.Add(IdCode);

                XElement IdCodeQualifier = new XElement("IdCodeQualifier");
                IdCodeQualifier.Value = OrganizationCode;
                Party.Add(IdCodeQualifier);

            }

            /*
              * 把各种地点类型放在字典里，循环读取添加
              */
            XElement Locations = new XElement("Locations");
            root.Add(Locations);

            foreach (var key in LocationTypeDict.Keys)
            {
                root.Add(getLocation(siteid, mSWB_NUM, key, shipment));
            }

            /**************************/

            XElement Containers = new XElement("Containers");
            root.Add(Containers);

            var containerCollection = shipment.Element("ContainerCollection").Elements("Container");
            foreach (var XContainer in containerCollection)
            {
                var Container = new XElement("Container");
                Containers.Add(Container);

                XElement EquipmentInitial = new XElement("EquipmentInitial");
                var containerNum = XContainer.Element("ContainerNumber").Value;
                //EquipmentInitial.Value = containerNum.Length > 4 ? containerNum.Substring(0, 4) : containerNum;
                EquipmentInitial.Value = containerNum;
                Container.Add(EquipmentInitial);

                XElement EquipmentNumber = new XElement("EquipmentNumber");
                //EquipmentNumber.Value = containerNum.Length > 4 ? containerNum.Substring(0, 4) : containerNum;
                EquipmentNumber.Value = containerNum;
                Container.Add(EquipmentNumber);

                XElement SealNumber1 = new XElement("SealNumber1");
                SealNumber1.Value = XContainer.Element("Seal").Value;
                Container.Add(SealNumber1);

                XElement EquipmentTypeCode = new XElement("EquipmentTypeCode");
                EquipmentTypeCode.Value = XContainer.Element("ContainerType").Element("Code").Value;
                Container.Add(EquipmentTypeCode);

                var Contents = new XElement("Contents");
                Contents.Value = "";
                Container.Add(Contents);

                var Content = new XElement("Content");
                Contents.Add(Content);

                XElement QuantityShipped = new XElement("QuantityShipped");
                QuantityShipped.Value = string.Empty;
                Content.Add(QuantityShipped);

                XElement UnitOfMeasure = new XElement("UnitOfMeasure");
                UnitOfMeasure.Value = string.Empty;
                Content.Add(UnitOfMeasure);

                XElement Description = new XElement("Description");
                Description.Value = "aaaaaaaa";
                Content.Add(Description);

                XElement GrossWeight = new XElement("GrossWeight");
                GrossWeight.Value = XContainer.Elements("GrossWeight").Where(x => int.Parse(x.Value) > 0).FirstOrDefault().Value;
                Content.Add(GrossWeight);

                XElement NetWeight = new XElement("NetWeight");
                NetWeight.Value = GrossWeight.Value;
                Content.Add(NetWeight);

                XElement WeightUnit = new XElement("WeightUnit");
                WeightUnit.Value = XContainer.Element("WeightUnit").Value;
                Content.Add(WeightUnit);

                XElement VolumeWeight = new XElement("VolumeWeight");
                VolumeWeight.Value = GrossWeight.Value;
                Content.Add(VolumeWeight);

                var height = XContainer.Element("TotalHeight").Value;
                var length = XContainer.Element("TotalLength").Value;
                var width = XContainer.Element("TotalWidth").Value;
                var volumn = 0.0;
                try
                {
                    volumn = float.Parse(height) * float.Parse(length) * float.Parse(width);
                }
                catch
                {
                    volumn = 0.0;
                }
                XElement Volume = new XElement("Volume");
                Volume.Value = volumn.ToString();
                Content.Add(Volume);

                XElement VolumeUnit = new XElement("VolumeUnit");
                VolumeUnit.Value = XContainer.Element("VolumeUnit").Value;
                Content.Add(VolumeUnit);

                XElement ScheduleBNumber = new XElement("ScheduleBNumber");
                ScheduleBNumber.Value = "";
                Content.Add(ScheduleBNumber);

                XElement HTSNumber = new XElement("HTSNumber");
                HTSNumber.Value = string.Empty;
                Content.Add(HTSNumber);

                XElement Value = new XElement("Value");
                Value.Value = "";
                Content.Add(Value);
            }


            var Charges = new XElement("Charges");
            Charges.Value = "";
            root.Add(Charges);

            XElement MarksNumbers = new XElement("MarksNumbers");
            //MarksNumbers.Value = "AWBServiceLevel:" + shipment.Element("AWBServiceLevel").Element("Description").Value + Environment.NewLine + "ContainerMode:" + shipment.Element("ContainerMode").Element("Description").Value;
            MarksNumbers.Value = string.Empty;
            return OCEBOSDoc;
        }
        public static XElement AnalyseSubshipment(XElement shipment)
        {
            var root = new XElement("Shipment");

            var subshipment = shipment.Element("SubShipmentCollection").Element("SubShipment");
            var datacontext = shipment.Element("DataContext");
            string mshipmentType = shipment.Element("ContainerMode").Element("Code").Value;
            string movementType = shipment.Element("TransportMode").Element("Code").Value;
            string mVessel = subshipment.Element("VesselName").Value;
            string mVoyage = subshipment.Element("VoyageFlightNo").Value;

            string mMSWB_NUM = subshipment.Element("BookingConfirmationReference").Value;
            var waybilltype = shipment.Element("WayBillType").Value + string.Empty;
            if (waybilltype == "MWB")
            {
                mMSWB_NUM = shipment.Element("WayBillNumber").Value;
            }

            string mSWB_NUM = subshipment.Element("WayBillNumber").Value;

            var siteid = datacontext.Element("EnterpriseID").Value + datacontext.Element("Company").Element("Code").Value;
            var sqlHelper = new SQLHelper(Resource1.ATP_SEA);
            var dt = sqlHelper.ExecuteQuery2DataTable("select * From dbo.Ocebos_Number", System.Data.CommandType.Text);
            var Ocebos_Number = "";
            if (dt != null && dt.Rows.Count > 0)
            {
                Ocebos_Number = dt.Rows[0][0].ToString();
                Ocebos_Number = addstr(Ocebos_Number);
                sqlHelper.ExecuteNoQuery("update Ocebos_Number set maxid=maxid+1", System.Data.CommandType.Text);
            }

            XElement TransactionId = new XElement("TransactionId");
            TransactionId.Value = "SEA" + DateTime.Now.ToString("yyyyMMddhhmm");
            root.Add(TransactionId);

            XElement TransactionDateTime = new XElement("TransactionDateTime");
            TransactionDateTime.Value = DateTime.Now.Date.ToString("yyyy-MM-dd hh:mm:ss");
            root.Add(TransactionDateTime);

            XElement TransactionSetPurpose = new XElement("TransactionSetPurpose");
            TransactionSetPurpose.Value = "Add";
            root.Add(TransactionSetPurpose);

            XElement ShipmentType = new XElement("ShipmentType");
            ShipmentType.Value = movementType;
            root.Add(ShipmentType);

            var issue_date = datacontext.Element("TriggerDate").Value;
            XElement DocumentDate = new XElement("DocumentDate");
            DocumentDate.Value = issue_date.Length > 10 ? issue_date.Substring(0, 10) : issue_date;
            root.Add(DocumentDate);

            XElement FileNumber = new XElement("FileNumber");
            FileNumber.Value = "File" + Ocebos_Number;
            root.Add(FileNumber);

            XElement MasterBillNumber = new XElement("MasterBillNumber");
            MasterBillNumber.Value = mMSWB_NUM;
            root.Add(MasterBillNumber);

            XElement HouseBillNumber = new XElement("HouseBillNumber");
            HouseBillNumber.Value = mSWB_NUM;
            root.Add(HouseBillNumber);

            XElement SubHouseBillNumber = new XElement("SubHouseBillNumber");
            SubHouseBillNumber.Value = "";
            root.Add(SubHouseBillNumber);

            XElement ITNumber = new XElement("ITNumber");
            ITNumber.Value = "aaaaaaaa";
            root.Add(ITNumber);

            XElement BookingNumber = new XElement("BookingNumber");
            BookingNumber.Value = "";// SWB.Rows[0]["jobid"].ToString();
            root.Add(BookingNumber);

            XElement OriginReference = new XElement("OriginReference");
            OriginReference.Value = "aaaaaaaa";
            root.Add(OriginReference);

            XElement Division = new XElement("Division");
            Division.Value = siteid;
            root.Add(Division);

            XElement PaymentMethod = new XElement("PaymentMethod");
            PaymentMethod.Value = "";//mswbTbl.Rows[0]["Pay_term"].ToString();
            root.Add(PaymentMethod);

            XElement TransportationMethod = new XElement("TransportationMethod");
            TransportationMethod.Value = "OCEAN";
            root.Add(TransportationMethod);

            XElement TypeOfMove = new XElement("TypeOfMove");
            TypeOfMove.Value = movementType;
            root.Add(TypeOfMove);

            XElement VesselName = new XElement("VesselName");
            VesselName.Value = mVessel;
            root.Add(VesselName);

            XElement VoyageFlightNumber = new XElement("VoyageFlightNumber");
            VoyageFlightNumber.Value = mVoyage;
            root.Add(VoyageFlightNumber);

            var subDateCollection = subshipment.Elements("DateCollection").Elements();
            if (subDateCollection == null || subDateCollection.Count() < 1)
                subDateCollection = shipment.Elements("DateCollection").Elements();

            var on_board_date = subDateCollection.Where(x => x.Element("Type").Value == "Departure" && x.Element("IsEstimate").Value == "true").FirstOrDefault().Element("Value").Value;
            if (on_board_date.Length > 0)
            {
                var datetime = Convert.ToDateTime(on_board_date);
                on_board_date = datetime.ToString("yyyy-MM-dd hh:mm:ss");
            }
            XElement DepartureDateTime = new XElement("DepartureDateTime");
            DepartureDateTime.Value = on_board_date;
            root.Add(DepartureDateTime);

            var eta_date = subDateCollection.Where(x => x.Element("Type").Value == "Arrival" && x.Element("IsEstimate").Value == "true").FirstOrDefault().Element("Value").Value;
            if (eta_date.Length > 0)
            {
                var datetime = Convert.ToDateTime(eta_date);
                eta_date = datetime.ToString("yyyy-MM-dd hh:mm:ss");
            }
            XElement ArrivalDateTime = new XElement("ArrivalDateTime");
            ArrivalDateTime.Value = eta_date;
            root.Add(ArrivalDateTime);

            XElement ImportDate = new XElement("ImportDate");
            ImportDate.Value = eta_date.Length > 10 ? eta_date.Substring(0, 10) : eta_date;
            root.Add(ImportDate);

            XElement FIRMSCode = new XElement("FIRMSCode");
            FIRMSCode.Value = "aaaaaaaa";
            root.Add(FIRMSCode);

            XElement Parties = new XElement("Parties");
            root.Add(Parties);

            var OrganCollect = subshipment.Element("OrganizationAddressCollection").Elements();
            if (OrganCollect == null || OrganCollect.Count() < 1)
            {
                OrganCollect.Elements("OrganizationAddressCollection").Elements();
            }
            foreach (var organ in OrganCollect)
            {
                var sourcetype = organ.Element("AddressType").Value;
                sourcetype = ConvertAddressType(sourcetype);
                //找不到对应的键值就进入下个party的判断
                if (sourcetype.Equals(string.Empty))
                {
                    continue;
                }
                var Party = new XElement("Party");
                Parties.Add(Party);

                XElement PartyType = new XElement("PartyType");
                PartyType.Value = sourcetype;//转化为相应的Partytype
                Party.Add(PartyType);

                XElement PartyCode = new XElement("PartyCode");
                PartyCode.Value = organ.Element("OrganizationCode").Value;
                Party.Add(PartyCode);

                XElement PartyName = new XElement("Name");
                PartyName.Value = organ.Element("CompanyName").Value;
                Party.Add(PartyName);

                XElement PartyAddress1 = new XElement("Address1");
                PartyAddress1.Value = organ.Element("Address1").Value;
                Party.Add(PartyAddress1);

                XElement PartyAddress2 = new XElement("Address2");
                PartyAddress2.Value = organ.Element("Address2").Value;
                Party.Add(PartyAddress2);

                XElement CityName = new XElement("CityName");
                CityName.Value = organ.Element("City").Value;
                Party.Add(CityName);

                XElement StateOrProvinceCode = new XElement("StateOrProvinceCode");
                StateOrProvinceCode.Value = organ.Element("State").Value;
                Party.Add(StateOrProvinceCode);

                XElement PostalCode = new XElement("PostalCode");
                PostalCode.Value = "";
                Party.Add(PostalCode);

                XElement CountryCode = new XElement("CountryCode");
                CountryCode.Value = organ.Element("Country").Element("Code").Value;
                Party.Add(CountryCode);

                XElement IdCode = new XElement("IdCode");
                IdCode.Value = organ.Element("OrganizationCode").Value;
                Party.Add(IdCode);

                XElement IdCodeQualifier = new XElement("IdCodeQualifier");
                IdCodeQualifier.Value = organ.Element("OrganizationCode").Value;
                Party.Add(IdCodeQualifier);
            }
            /*
             * 把各种地点类型放在字典里，循环读取添加
             */
            XElement Locations = new XElement("Locations");
            root.Add(Locations);

            foreach (var key in LocationTypeDict.Keys)
            {
                root.Add(getLocation(siteid, mSWB_NUM, key, subshipment));
            }

            /**************************/
            XElement Containers = new XElement("Containers");
            root.Add(Containers);

            var ContainerCollection = subshipment.Element("ContainerCollection").Elements();
            if (ContainerCollection == null || ContainerCollection.Count() < 1)
            {
                ContainerCollection = shipment.Element("ContainerCollection").Elements();
            }
            foreach (var item in ContainerCollection)
            {
                var Container = new XElement("Container");
                Containers.Add(Container);

                XElement EquipmentInitial = new XElement("EquipmentInitial");
                var containerNum = item.Element("ContainerNumber").Value;
                //EquipmentInitial.Value = containerNum.Length > 4 ? containerNum.Substring(0, 4) : containerNum;
                EquipmentInitial.Value = containerNum;
                Container.Add(EquipmentInitial);

                XElement EquipmentNumber = new XElement("EquipmentNumber");
                //EquipmentNumber.Value = containerNum.Length > 4 ? containerNum.Substring(0, 4) : containerNum;
                EquipmentNumber.Value = containerNum;
                Container.Add(EquipmentNumber);

                XElement SealNumber1 = new XElement("SealNumber1");
                SealNumber1.Value = item.Element("Seal").Value;
                Container.Add(SealNumber1);

                XElement EquipmentTypeCode = new XElement("EquipmentTypeCode");
                EquipmentTypeCode.Value = item.Element("ContainerType").Element("Code").Value;
                Container.Add(EquipmentTypeCode);

                var Contents = new XElement("Contents");
                Contents.Value = "";
                Container.Add(Contents);

                var Content = new XElement("Content");
                Contents.Add(Content);
            }
            var PackingLineCollection = subshipment.Element("PackingLineCollection").Elements();
            if (PackingLineCollection == null || PackingLineCollection.Count() < 1)
            {
                PackingLineCollection = shipment.Element("PackingLineCollection").Elements();
            }
            foreach (var container in Containers.Elements())
            {
                //EquipmentInitial此处EquipmentInitial就是ContainerNumber
                var ContainerNumber = container.Element("EquipmentInitial").Value;
                var relatePackline = PackingLineCollection.Where(x => x.Element("ContainerNumber").Value == ContainerNumber).FirstOrDefault();

                var relateContainer = container;
                var Contents = relateContainer.Element("Contents");
                var Content = Contents.Element("Content");

                XElement QuantityShipped = new XElement("QuantityShipped");
                QuantityShipped.Value = relatePackline.Element("PackQty").Value;
                Content.Add(QuantityShipped);

                XElement UnitOfMeasure = new XElement("UnitOfMeasure");
                UnitOfMeasure.Value = relatePackline.Element("PackType").Element("Code").Value;
                Content.Add(UnitOfMeasure);

                XElement Description = new XElement("Description");
                Description.Value = relatePackline.Element("GoodsDescription").Value;
                Content.Add(Description);

                XElement GrossWeight = new XElement("GrossWeight");
                GrossWeight.Value = relatePackline.Element("Weight").Value;
                Content.Add(GrossWeight);

                XElement NetWeight = new XElement("NetWeight");
                NetWeight.Value = relatePackline.Element("Weight").Value;
                Content.Add(NetWeight);

                XElement WeightUnit = new XElement("WeightUnit");
                WeightUnit.Value = relatePackline.Element("WeightUnit").Element("Code").Value;
                Content.Add(WeightUnit);

                XElement VolumeWeight = new XElement("VolumeWeight");
                VolumeWeight.Value = relatePackline.Element("Volume").Value;
                Content.Add(VolumeWeight);

                XElement VolumeUnit = new XElement("VolumeUnit");
                VolumeUnit.Value = relatePackline.Element("VolumeUnit").Element("Code").Value;
                Content.Add(VolumeUnit);

                XElement ScheduleBNumber = new XElement("ScheduleBNumber");
                ScheduleBNumber.Value = "";
                Content.Add(ScheduleBNumber);

                XElement HTSNumber = new XElement("HTSNumber");
                HTSNumber.Value = relatePackline.Element("MarksAndNos").Value;
                Content.Add(HTSNumber);

                XElement Value = new XElement("Value");
                Value.Value = "";
                Content.Add(Value);

                //根据原来系统里containernumber 取前4们的做法，已经做完判断后要截取了;\
                container.Element("EquipmentInitial").Value = ContainerNumber.Length > 4 ? ContainerNumber.Substring(0, 4) : ContainerNumber;
                container.Element("EquipmentNumber").Value = ContainerNumber.Length > 4 ? ContainerNumber.Substring(0, 4) : ContainerNumber;
            }
            var Charges = new XElement("Charges");
            root.Add(Charges);

            XElement MarksNumbers = new XElement("MarksNumbers");
            MarksNumbers.Value = GetDesscriptionAndMarkNumbers(subshipment);//暂时留空，再问alva要怎么搞
            root.Add(MarksNumbers);

            return root;
        }

        private static string GetDesscriptionAndMarkNumbers(XElement subshipment)
        {
            var PackingLineCollection = subshipment.Element("PackingLineCollection").Elements();
            var ContainerCollection = subshipment.Element("ContainerCollection").Elements();
            if (PackingLineCollection == null || PackingLineCollection.Count() < 1)
            {
                var shipment = subshipment.Parent.Parent;
                PackingLineCollection = shipment.Element("PackingLineCollection").Elements();
            }
            if (ContainerCollection == null || PackingLineCollection.Count() < 0)
            {
                ContainerCollection = subshipment.Element("ContainerCollection").Elements();
            }
            var sbuilder = new StringBuilder(string.Empty);
            var strContainerNumNode = "ContainerNumber";
            //var count = 1;
            foreach (var item in ContainerCollection)
            {
                var containerNum = item.Element(strContainerNumNode).Value;
                if (containerNum.Length > 0)
                {
                    var relatePackingline = PackingLineCollection.Where(x => x.Element(strContainerNumNode).Value == containerNum).FirstOrDefault();
                    if (relatePackingline.HasElements)
                    {
                        sbuilder.AppendFormat("\t{0}", relatePackingline.Element("MarksAndNos").Value);
                    }
                }
            }
            return sbuilder.ToString();
        }

        public static XElement getLocation(string siteid, string swb_num, string thename, XElement subShipment)
        {
            var Location = new XElement("Location");
            var valueNodeName = LocationTypeDict[thename];
            var locationNode = subShipment.Element(valueNodeName);
            if (locationNode == null || !locationNode.HasElements)
            {
                if (subShipment.Parent.Parent != null)
                {
                    var shipment = subShipment.Parent.Parent;
                    locationNode = shipment.Element(valueNodeName);
                }
                else
                {
                    return null;
                }
            }
            var str_citycode = locationNode.Element("Code").Value;

            //这里只需要取出城市代码就可以了，去年国家/地区代码
            str_citycode = str_citycode.Length > 3 ? str_citycode.Substring(str_citycode.Length - 3, 3) : str_citycode;
            var str_cityname = locationNode.Element("Name").Value;

            //PortOfFirstArrival节点没有Name
            //if (string.Compare(nodeName, "PortOfFirstArrival", true) < 0)
            //str_cityname = locationNode.Element("Name").Value;

            XElement LocationType = new XElement("LocationType");
            LocationType.Value = valueNodeName;
            Location.Add(LocationType);

            XElement LocationIdQualifier = new XElement("LocationIdQualifier");
            LocationIdQualifier.Value = str_citycode;
            Location.Add(LocationIdQualifier);

            XElement LocationId = new XElement("LocationId");
            LocationId.Value = str_citycode;
            Location.Add(LocationId);

            XElement LocationName = new XElement("LocationName");
            LocationName.Value = str_cityname;
            Location.Add(LocationName);

            string str_StateOrProvinceCode = "", str_CountryCode = "";
            var helper = new SQLHelper(Resource1.ATP_SEA);

            DataTable dt_state = helper.ExecuteQuery2DataTable("select * From atp_master.dbo.view_city where city_code='" + str_citycode + "' and siteid='" + siteid + "'", CommandType.Text);
            if (dt_state.Rows.Count > 0)
            {
                str_StateOrProvinceCode = dt_state.Rows[0]["region_name"].ToString().Trim();
                str_CountryCode = dt_state.Rows[0]["country_code"].ToString().Trim();
            }
            XElement StateOrProvinceCode = new XElement("StateOrProvinceCode");
            StateOrProvinceCode.Value = str_StateOrProvinceCode;
            Location.Add(StateOrProvinceCode);
            XElement CountryCode = new XElement("CountryCode");
            CountryCode.Value = str_CountryCode;
            Location.Add(CountryCode);

            return Location;
        }
        public static void getparties(XElement Party)
        {

        }


        public static string ConvertAddressType(string source)
        {
            if (source.Length > 0)
            {
                source = source.Trim();
                var flag = false;
                foreach (var key in AddressTypeDict.Keys)
                {
                    if (string.Compare(source, key, true) == 0)
                    {
                        flag = true;
                        source = AddressTypeDict[source];
                        break;
                    }
                }
                if (!flag)//如果没有找到匹配的key，就把值设置为空
                {
                    source = string.Empty;
                }
            }
            return source;
        }
        public static string addstr(string Ocebos_Number)
        {
            int num = 10;
            string str_return = "";
            if (Ocebos_Number.Length < num)
            {
                for (int i = 0; i < (num - Ocebos_Number.Length); i++)
                {
                    str_return += "0";
                }
            }
            str_return += Ocebos_Number;
            return str_return;
        }
    }
}
